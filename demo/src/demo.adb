with Ada.Streams.Stream_IO;
with Ada.Wide_Wide_Text_IO;
with League.Strings;

with My_Format.Basics;
     --  ^ Generated by "protoc --ada_out=. basics.proto".

procedure Demo is

   procedure Show (p : My_Format.Basics.Person) is
   begin
      Ada.Wide_Wide_Text_IO.Put_Line
         (League.Strings.To_Wide_Wide_String (p.Name) &
          ", " &
          (if p.Gender.Is_Set then
              p.Gender.Value'Wide_Wide_Image
           else
              "Unknown gender") &
          ',' &
          p.Birth_Year'Wide_Wide_Image);
    end Show;

   procedure Write_Person (db_name : String) is
      use Ada.Streams.Stream_IO, League.Strings, My_Format.Basics;
      f : File_Type;
   begin
      Create (f, Out_File, db_name);
      Person'Write
         (Stream (f),
            ((Name       => To_Universal_String ("Plinius"),
              Birth_Year => 23,
              Gender     => (Is_Set => True, Value => Male))));
      Close (f);
   end Write_Person;

   procedure Read_Person (db_name : String) is
      use Ada.Streams.Stream_IO, My_Format.Basics;
      p : Person;
      f : File_Type;
   begin
      Open (f, In_File, db_name);
      Person'Read (Stream (f), p);
      Close (f);

      Show (p);
   end Read_Person;

   procedure Write_Crowd (db_name : String) is
      use Ada.Streams.Stream_IO, League.Strings, My_Format.Basics;
      c : Crowd;
      f : File_Type;
   begin
      Create (f, Out_File, db_name);

      c.Individual.Append
         ((Name       => To_Universal_String ("Salvador"),
           Birth_Year => 1904,
           Gender     => (Is_Set => True, Value => Male)));

      c.Individual.Append
         ((Name       => To_Universal_String ("Ada"),
           Birth_Year => 1815,
           Gender     => (Is_Set => True, Value => Female)));

      c.Individual.Append
         ((Name       => To_Universal_String ("XYAZ_13"),
           Birth_Year => 2010,
           Gender     => (Is_Set => False)));

      c.Useless_Symbol := 666;

      Crowd'Write (Stream (f), c);

      Close (f);
   end Write_Crowd;

   procedure Read_Crowd (db_name : String) is
      use Ada.Streams.Stream_IO, My_Format.Basics;
      c : Crowd;
      f : File_Type;
   begin
      Open (f, In_File, db_name);
      Crowd'Read (Stream (f), c);
      Close (f);

      for i in 1 .. Length (c.Individual) loop
        Show (c.Individual (i));
      end loop;
      Ada.Wide_Wide_Text_IO.Put_Line
         ("Useless_Symbol =" & c.Useless_Symbol'Wide_Wide_Image);

   end Read_Crowd;

begin
  --  Just a person.
  Write_Person ("person.my_format");
  Read_Person  ("person.my_format");

  --  A crowd.
  Write_Crowd ("crowd.my_format");
  Read_Crowd  ("crowd.my_format");
end Demo;
